import bcrypt from 'bcryptjs';
import { Request, Response } from 'express';
import { IUser } from '../../types/express';
import ctrlWrapper from '../../utils/ctrlWrapper';
import requestError from '../../utils/requestError';
import User from '../../models/User';
import validateUpdateInput from '../../utils/validateUpdateInput';
import sendEmail from '../../utils/sendEmail';

const updateUser = ctrlWrapper(async (req: Request, res: Response) => {
  const { id } = req.params;
  const body: Partial<IUser> = req.body;

  validateUpdateInput(id, body);

  const checkUser = await User.findOne({
    _id: { $ne: id },
    $or: [{ email: body.email }, { login: body.login }],
  });
  if (checkUser) {
    throw requestError(409, 'email or login already exists');
  }
  // –ø—Ä–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –µ–º–∞–π–ª —Ä–æ–∑—Å–∏–ª–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –µ–º–∞–π–ª—É –∞–±–æ –ø–∞—Ä–æ–ª—é —Ç–æ—â–æ.

  if (body.password) {
    if (body.email) {
      await sendEmail({
        to: body.email,
        subject: '–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∞–∫–∞—É–Ω—Ç–∞ –Ω–∞ ingco-service',
        html: `<h1>–í—ñ—Ç–∞—é! –≤–∞—Å –±—É–ª–æ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ</h1>
        <p>–¢–µ–ø–µ—Ä —É –≤–∞—Å —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–≤—ñ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω <a href="https://ingco-service.win/login" rel="nofollow noreferrer" target="_blank">ingco-service</a></p>
        <p>–í–∞—à –ª–æ–≥—ñ–Ω: ${body.login}</p>
        <p>–í–∞—à –ø–∞—Ä–æ–ª—å: ${body.password}</p>
        <p>–ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∑–∞—î–º–æ–≤–∏–≥—ñ–¥–Ω—É —Å–ø—ñ–≤–ø—Ä–∞—Ü—é üíµ</p>`,
      });
    }
    body.password = await bcrypt.hash(body.password, 5);
  }

  const user = await User.findByIdAndUpdate(id, body, { new: true })
    .select('-password')
    .populate('orders', 'orderCode totalPrice status');

  if (!user) {
    throw requestError(404, 'User not found');
  }

  res.json(user);
});

export default updateUser;
